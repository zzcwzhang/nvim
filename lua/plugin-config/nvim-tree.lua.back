local status, nvim_tree = pcall(require, "nvim-tree")
if not status then
    vim.notify("没有找到nvim-tree")
  return
end

local function change_root_to_global_cwd()
  local api = require("nvim-tree.api")
  local global_cwd = vim.fn.getcwd(-1, -1)
  print('cwd: '.. global_cwd)
  api.tree.change_root(global_cwd)
end

-- 菜单
local tree_actions = {
  {
    name = "a 创建",
    handler = require("nvim-tree.api").fs.create,
  },
  {
    name = "c 复制",
    handler = require("nvim-tree.api").fs.copy.node,
  },
  {
    name = "p 粘贴",
    handler = require("nvim-tree.api").fs.paste,
  },
  {
    name = "d 删除",
    handler = require("nvim-tree.api").fs.remove,
  },
  {
    name = "t 清理",
    handler = require("nvim-tree.api").fs.trash,
  },
  {
    name = "r 重命名",
    handler = require("nvim-tree.api").fs.rename_sub,
  },
  {
    name = "s 系统打开",
    handler = require("nvim-tree.api").fs.system_open,
  },

  -- ... other custom actions you may want to display in the menu
}
local function tree_actions_menu(node)
  local entry_maker = function(menu_item)
    return {
      value = menu_item,
      ordinal = menu_item.name,
      display = menu_item.name,
    }
  end

  local finder = require("telescope.finders").new_table({
    results = tree_actions,
    entry_maker = entry_maker,
  })

  local sorter = require("telescope.sorters").get_generic_fuzzy_sorter()

  local default_options = {
    finder = finder,
    sorter = sorter,
    attach_mappings = function(prompt_buffer_number)
      local actions = require("telescope.actions")

      -- On item select
      actions.select_default:replace(function()
        local state = require("telescope.actions.state")
        local selection = state.get_selected_entry()
        -- Closing the picker
        actions.close(prompt_buffer_number)
        -- Executing the callback
        selection.value.handler(node)
      end)

      -- The following actions are disabled in this example
      -- You may want to map them too depending on your needs though
      actions.add_selection:replace(function() end)
      actions.remove_selection:replace(function() end)
      actions.toggle_selection:replace(function() end)
      actions.select_all:replace(function() end)
      actions.drop_all:replace(function() end)
      actions.toggle_all:replace(function() end)

      return true
    end,
  }

  -- Opening the menu
  require("telescope.pickers").new({ prompt_title = "Tree menu" }, default_options):find()
end

function mark(node) 
  local api = require("nvim-tree.api")
  api.marks.toggle(node)
end

function markList()
  local api = require("nvim-tree.api")
  local list = api.marks.list()
  print("list: ")
  for key, value in pairs(list) do
    print(key, value)
  end
end

-- 列表快捷键
local list_keys = {
  -- cwd
  { key = "cd", action = "global_cwd", action_cb = change_root_to_global_cwd },
  { key = "<C-c>", action = "global_cwd", action_cb = change_root_to_global_cwd },
  { key = "m", action = "tree actions", action_cb = tree_actions_menu },
  { key = "b", action = "mark", action_cb = mark },
  { key = "B", action = "markList", action_cb = markList },
  -- 打开文件或文件夹
  { key = {"<CR>", "o", "<2-LeftMouse>"}, action = "edit" },
  -- 分屏打开文件
  { key = "v", action = "vsplit" },
  { key = "s", action = "split" },
  -- 显示隐藏文件
  { key = "i", action = "toggle_custom" }, -- 对应 filters 中的 custom (node_modules)
  { key = ".", action = "toggle_dotfiles" }, -- Hide (dotfiles)
  -- 文件操作
  { key = "R", action = "refresh" },
  -- { key = "a", action = "create" },
  -- { key = "d", action = "remove" },
  -- { key = "r", action = "rename" },
  -- { key = "x", action = "cut" },
  -- { key = "c", action = "copy" },
  -- { key = "p", action = "paste" },
  -- { key = "s", action = "system_open" },
}

nvim_tree.setup({
  -- 过滤文件夹
  live_filter = {
    prefix = "[FILTER]: ",
    always_show_folders = false, -- Turn into false from true by default
  },
  open_on_tab = true,
  -- 不显示 git 状态图标
  git = {
    enable = true,
  },
  -- project plugin 需要这样设置
  sync_root_with_cwd = true,
  respect_buf_cwd = true,
  update_focused_file = {
    enable = true,
    update_root = false
  },
  -- 隐藏 .文件 和 node_modules 文件夹
  filters = {
    dotfiles = true,
    custom = { 'node_modules' },
  },
  view = {
    -- 宽度
    width = 34,
    -- 也可以 'right'
    side = 'left',
    -- 隐藏根目录
    hide_root_folder = false,
    -- 自定义列表中快捷键
    mappings = {
      custom_only = true,
      list = list_keys,
    },
    -- 不显示行数
    number = false,
    relativenumber = false,
    -- 显示图标
    signcolumn = 'yes',
  },
  actions = {
    open_file = {
      -- 首次打开大小适配
      resize_window = true,
      -- 打开文件时关闭
      quit_on_open = false,
    },
  },
  -- wsl install -g wsl-open
  -- https://github.com/4U6U57/wsl-open/
  system_open = {
    cmd = 'open', -- mac 直接设置为 open
  },
})

-- 自动关闭
vim.cmd([[
  autocmd BufEnter * ++nested if winnr('$') == 1 && bufname() == 'NvimTree_' . tabpagenr() | quit | endif
]])

local function open_nvim_tree(data)

  -- buffer is a directory
  -- local directory = vim.fn.isdirectory(data.file) == 1
  --
  -- if not directory then
  --   return
  -- end
  --
  -- -- change to the directory
  -- vim.cmd.cd(data.file)
  --
  -- open the tree
  require("nvim-tree.api").tree.open()
end

-- vim.api.nvim_create_autocmd({ "VimEnter" }, { callback = open_nvim_tree })
